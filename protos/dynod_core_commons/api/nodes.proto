/*
Nodes service handling
*/
syntax = "proto3";
import "grpc_helper/api/common.proto";
import "dynod_core_commons/api/shared.proto";

/*
API versions
*/
enum NodesApiVersion {
    option allow_alias = true;
    NODES_API_UNKNOWN = 0;
    NODES_API_SUPPORTED = 1;    // Minimum supported version for clients
    NODES_API_CURRENT = 1;      // Current version
}

// Supported node types
enum NodeType {
    NODE_UNKNOWN = 0;   // Not set
    NODE_GATEWAY = 1;   // Gateway handling other nodes
    NODE_GROUP = 2;     // Group of nodes
    NODE_ACTION = 3;    // Actionable node
    NODE_SENSOR = 4;    // Sensor node (unable to perform any action)
}

// Port definition
message NodePort {
    string name = 1;        // Port name (usually the used protocol: SSH, Telnet, etc...)
    uint32 number = 2;      // Port number
    string credentials = 3; // Credentials to access this node's port (login:password, token, etc...)
}

// Property definition
message NodeProperty {
    string name = 1;    // Property name
    string value = 2;   // Property value
}

// Node definition
message Node {
    string name = 1;                        // Unique node identifier
    string label = 2;                       // Node label (short description for UIs)
    NodeType type = 3;                      // Generic type of the node
    string gateway = 4;                     // Name of gateway node/model handling this node (if applicable)
    repeated string groups = 5;             // Names of node groups containing this node
    string host = 6;                        // Host/IP of the node (if applicable)
    repeated NodePort ports = 7;            // Ports used to control the node (if applicable)
    repeated NodeProperty properties = 8;   // Properties used to configure the node
}

// Node capabilities
enum NodeCapabilities {
    NODE_CAP_UNKNOWN = 0;   // Not set
    NODE_CAP_GATEWAY = 1;   // Serves the gateway service (able to handle other nodes)
    NODE_CAP_SWITCH = 2;    // Serves the switch service (node can be switched on/off)
}

// Node status
message NodeStatusItem {
    Node node = 1;                              // The node itself
    bool reachable = 2;                         // If the node is reachable
    repeated NodeProperty ro_properties = 3;    // Read-only properties detected from the node
    NodePort access = 4;                        // Access port for node RPC services (according to capabilities)
    NodeCapabilities capabilities = 5;          // Service capabilities for this node
}

// Node status message
message NodeStatus {
    Result r = 1;                       // Operation result
    repeated NodeStatusItem items = 2;  // Nodes status
}

// Filter used for nodes listing
message NodeFilter {
    repeated string names = 1;                  // To filter nodes by names
    repeated NodeType types = 2;                // To filter nodes by types
    repeated NodeCapabilities capabilities = 3; // To filter nodes by capabilities
    repeated string gateways = 4;               // To filter nodes by gateways
    repeated string groups = 5;                 // To filter nodes by groups
}

// Nodes service
service NodeService {
    // List known nodes
    rpc list(NodeFilter) returns (NodeStatus);

    // Add a new node
    rpc add(Node) returns (NodeStatus);

    // Update an existing node
    rpc update(Node) returns (NodeStatus);

    // Remove existing node(s)
    rpc remove(NodeFilter) returns (NodeStatus);

    // Rename an existing node
    rpc rename(Rename) returns (NodeStatus);
}

// Gateway registration message
message GatewayRegisterRequest {
    string model = 1;       // Gateway model to be registered (to be used in gateway field of declared NODE_GATEWAY node instances)
    NodePort access = 2;    // Access port for gateway model NodeService instance
}

// Gateway firget message
message GatewayForgetRequest {
    string model = 1;       // Gateway model to be forgotten
}

// Gateway registration service
service GatewayRegisterServive {
    // Register a new gateway
    rpc register(GatewayRegisterRequest) returns (ResultStatus);

    // Forget a known gateway
    rpc forget(GatewayForgetRequest) returns (ResultStatus);
}
